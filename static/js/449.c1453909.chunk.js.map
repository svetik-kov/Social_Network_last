{"version":3,"file":"static/js/449.c1453909.chunk.js","mappings":"0KACA,G,QAA0B,0BAA1B,EAAiE,6BAAjE,EAAuG,wBAAvG,EAAwI,wBAAxI,EAA2K,0BAA3K,EAA+M,yB,mBCQlMA,EAAW,SAACC,GACrB,IAAIC,EAAK,YAAD,OAAaD,EAAME,IAC3B,OACI,gBAAKC,UAAWC,EAAW,IAAKA,EAAhC,UACI,UAAC,KAAD,CAASC,GAAIJ,EAAb,cAAqBD,EAAMM,WCJ1BC,EAAQ,SAACP,GAClB,OACI,gBAAKG,UAAWC,EAAhB,SAA4BJ,EAAMQ,W,uCCJpCC,GAAcC,EAAAA,EAAAA,IAAiB,IAkBrC,GAAeC,EAAAA,EAAAA,GAAU,CAACC,KAAM,wBAAhC,EAjBwB,SAACZ,GAErB,OACI,kBAAMa,SAAUb,EAAMc,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GACXX,KAAM,iBACNY,SAAU,CAACC,EAAAA,GAAUV,GACrBW,YAAa,0BAExB,0BAEI,6C,8BC8BhB,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAlCkB,SAACC,GACnB,MAAO,CACHC,aAAcD,EAAMC,iBAIH,SAACC,GACtB,MAAO,CACHC,YAAa,SAACC,GACVF,GAASG,EAAAA,EAAAA,GAAcD,SA0B/BE,EAAAA,EAFJ,ECzBuB,SAAC7B,GACpB,IAAIuB,EAAQvB,EAAMwB,aAEdM,EAAkBP,EAAMQ,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAClC,EAAD,CAAuBO,KAAM2B,EAAE3B,KAAMJ,GAAI+B,EAAE/B,IAA1B+B,EAAE/B,OAC5DgC,EAAmBX,EAAMY,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC7B,EAAD,CAAoBC,QAAS4B,EAAE5B,SAAjB4B,EAAElC,OAoB/D,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK0B,KAEL,iBAAK3B,UAAWC,EAAhB,WACI,yBAAM8B,KAYN,SAAC,EAAD,CAAgBrB,SAxBN,SAACwB,GACnBrC,EAAM0B,YAAYW,EAAOV,6B,iICpC7BW,EAA6B,SAACf,GAAD,MAAuD,CACpFgB,OAAQhB,EAAMiB,KAAKD,SAGhB,SAASV,EAAoBY,GAUhC,OADqCnB,EAAAA,EAAAA,IAAQgB,EAARhB,EAPX,SAACtB,GACvB,IAAKuC,EAAwBvC,EAAxBuC,OAAWG,GAAhB,OAA6B1C,EAA7B,GACA,OAAKuC,GACE,SAACE,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUrC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__vTSGN\",\"dialogItems\":\"Dialogs_dialogItems__FJkJd\",\"active\":\"Dialogs_active__AEKMG\",\"dialog\":\"Dialogs_dialog__nlEW6\",\"messages\":\"Dialogs_messages__j7BG-\",\"message\":\"Dialogs_message__gjrOg\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\ntype DialogItemType={\r\n    name:string\r\n    id:number\r\n}\r\nexport const DialogItem=(props:DialogItemType)=>{\r\n    let path=`/dialogs/${props.id}`\r\n    return (\r\n        <div className={s.dialog + ' '+ s.active}>\r\n            <NavLink to={path}> {props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\n\r\n\r\ntype MessagePropsType={\r\n    message:string\r\n}\r\nexport const Message=(props:MessagePropsType)=>{\r\n    return(\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\n","import {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport React from 'react';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\n\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n const AddMessageForm = (props: InjectedFormProps) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={'newMessageBody'}\r\n                       validate={[required, maxLength50]}\r\n                       placeholder={'Enter your message'}/>\r\n            </div>\r\n            <div>\r\n\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {InitialStateType, sendMessageAC} from '../../redux/dialogs-reducer';\r\nimport {StateType} from '../../redux/redux-store';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\ntype MapStateToPropsType = {\r\n    messagesPage: InitialStateType\r\n    //isAuth:boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    //updateNewMessageBody: (body: string) => void\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\nlet mapStateToProps = (state: StateType): MapStateToPropsType => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n        //isAuth:state.auth.isAuth\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n/*let mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        updateNewMessageBody: (body: string) => {\r\n            dispatch(updateNewMessageBodyAC(body))\r\n        },\r\n        sendMessage: (newMessageBody:string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}*/\r\n\r\n/*compose(\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withAuthRedirect,\r\n)(Dialogs)*/\r\n\r\n/*let AuthRedirectComponent=withAuthRedirect(Dialogs)\r\n////\r\nexport const DialogsContainer=connect(mapStateToProps,mapDispatchToProps)(AuthRedirectComponent);*/\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect,\r\n)(Dialogs)\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {Message} from './Message/Message';\r\n\r\n\r\nimport {DialogsPropsType} from './DialogsContainer';\r\n\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport AddMessageForm from '../Dialogs/AddMessageForm/AddMessageForm';\r\n\r\n\r\n\r\n/*type MessagesPageType={\r\n    dialogs: DialogType[],\r\n    messages: MessageType[],\r\n    newMessageBody: string\r\n}\r\ntype DialogsType = {\r\n    //store: StoreType\r\n    updateNewMessageBody:(body:string)=>void\r\n    sendMessage:()=>void\r\n    messagesPage: MessagesPageType\r\n}*/\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    let state = props.messagesPage\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message}/>)\r\n    //let newMessage = state.newMessageBody\r\n\r\n    /*const onSendMessageClick = () => {\r\n        props.sendMessage()\r\n        //props.store.dispatch(sendMessageAC())\r\n    }\r\n    const onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n\r\n        let body = e.currentTarget.value\r\n        props.updateNewMessageBody(body)\r\n        //  props.store.dispatch(updateNewMessageBodyAC(body))\r\n    }*/\r\n\r\n    const newAddMessage = (values: any) => {\r\n        props.sendMessage(values.newMessageBody)\r\n        //console.log(values)\r\n    }\r\n\r\n    //if (!props.isAuth) return < Redirect to={'/login'}/>\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                {/* <div>\r\n                    <div>\r\n                        <textarea\r\n                        value={newMessage}\r\n                        onChange={onNewMessageChange}\r\n                        placeholder={'Enter your message'}/>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={onSendMessageClick}>Send</button>\r\n                    </div>\r\n                </div>*/}\r\n                <AddMessageForm onSubmit={newAddMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n/*type FormDataType = {\r\n    newMessage:string\r\n}*/\r\n\r\n/*const AddMessageForm = (props: InjectedFormProps) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={'textarea'}\r\n                       name={'newMessageBody'}\r\n                       placeholder={'Enter your message'}/>\r\n                {/!* <textarea\r\n                            value={newMessage}\r\n                            onChange={onNewMessageChange}\r\n                            placeholder={'Enter your message'}/>*!/}\r\n            </div>\r\n            <div>\r\n                {/!*    <button onClick={onSendMessageClick}>Send</button> *!/}\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}*/\r\n\r\n//const AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {StateType} from '../redux/redux-store';\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\nlet mapStateToPropsForRedirect = (state: StateType): MapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsForRedirectType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\n\r\n\r\n"],"names":["DialogItem","props","path","id","className","s","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","compose","connect","state","messagesPage","dispatch","sendMessage","newMessageBody","sendMessageAC","withAuthRedirect","dialogsElements","dialogs","map","d","messagesElements","messages","m","values","mapStateToPropsForRedirect","isAuth","auth","Component","restProps"],"sourceRoot":""}