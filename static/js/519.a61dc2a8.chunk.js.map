{"version":3,"file":"static/js/519.a61dc2a8.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWirhHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/Posts/MyPosts.module.css?a95a","webpack://samurai-way/./src/components/Profile/Posts/Post/Post.module.css?59e2","components/Profile/Posts/Post/Post.tsx","components/Profile/Posts/MyPosts.tsx","components/Profile/Posts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__ZdbCX\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\n\r\n/*type ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\ntype StateType = {\r\n    editMode: boolean\r\n    status: string\r\n}*/\r\n\r\ntype ProfileStatusWithHooksType = {\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusWithHooksType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n\r\n    }, [props.status]);\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || '-------'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        autoFocus onBlur={deActivateEditMode}\r\n                        value={status}/>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from 'redux/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader';\r\nimport ProfileStatusWithHooks from '../../../components/Profile/ProfileInfo/ProfileStatusWirhHooks';\r\n\r\ntype ProfileInfoType={\r\n    profile: ProfileType\r\n    status:string\r\n    updateStatus:(status:string)=>void\r\n}\r\nexport const ProfileInfo = ({profile,status,updateStatus}:ProfileInfoType) => {\r\n    if (!profile){\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n           {/* картинка на странице profile*/}\r\n            <div>\r\n                <img\r\n                    src=\"https://bogatyr.club/uploads/posts/2023-02/1675444895_bogatyr-club-p-kirpichnaya-stena-raznotsvetnaya-fon-vkont-1.jpg\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large}/>\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__-eGWI\",\"posts\":\"MyPosts_posts__hNejh\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__q4dmU\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType={\r\n    message:string\r\n    likesCount:number\r\n}\r\nexport const Post = (props:PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src={'https://avatars.mds.yandex.net/i?id=e2b5f60e9ae39ff17bf9de1effba6a32352e9205-4825378-images-thumbs&n=13'}/>\r\n            {props.message}\r\n            <div>\r\n                <span> Like: {props.likesCount}</span>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n","import React, {memo} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from './Post/Post';\r\n\r\nimport {MyPostType} from './MyPostsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from 'utils/validators/validators'\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\n\r\n\r\n/*type MyPosts = {\r\n    posts: PostType[]\r\n    newPostText: string\r\n    updateNewPostText: (text: string) => void\r\n    addPost: () => void\r\n}*/\r\n/* shouldComponentUpdate(nextProps: Readonly<MyPostType>, nextState: Readonly<{}>): boolean {\r\n         return nextProps !== this.props || nextState !== this.state\r\n     }*/\r\n\r\nexport const  MyPosts=memo((props: MyPostType)=> {\r\n    console.log('render')\r\n    let postsElements = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n      let newPostElement = React.useRef<HTMLTextAreaElement>(null)\r\n   /* let newPostElement = React.createRef<HTMLTextAreaElement>()*/\r\n\r\n    const onAddPost = (values: any) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n\r\n            <h3>My posts</h3>\r\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n            <div>New post</div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm = (props: InjectedFormProps) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={'newPostText'}\r\n                    validate={[required, maxLength10]}\r\n                    placeholder={'Post message'}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm({form: 'ProfileAddNewPostForm'})(AddNewPostForm)","import React from 'react';\r\n\r\nimport { addPostAC, InitialStateType} from 'redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {StateType, StoreType} from 'redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\n\r\n\r\ntype MapDispatchPropsType={\r\n    //updateNewPostText:(text:string)=>void\r\n    addPost:(newPostText:string)=>void\r\n}\r\n\r\nexport type MyPostType=InitialStateType &  MapDispatchPropsType\r\n\r\nlet mapStateToProps=(state:StateType):InitialStateType=>{\r\n    return{\r\n        posts:state.profilePage.posts,\r\n        newPostText:state.profilePage.newPostText,\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps=(dispatch:Dispatch):MapDispatchPropsType=>{\r\n    return {\r\n        addPost:(newPostText:string)=>{\r\n            dispatch(addPostAC(newPostText))\r\n        },\r\n        /*updateNewPostText:(text:string)=>{\r\n            dispatch(updateNewPostAC(text))\r\n        }*/\r\n        }\r\n\r\n}\r\n\r\nexport const MyPostsContainer=connect(mapStateToProps,mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './Posts/MyPostsContainer';\r\nimport {ProfileType} from 'redux/profile-reducer';\r\n\r\n\r\ntype ProfilePropsType={\r\n    profile:ProfileType\r\n    status:string\r\n    updateStatus:(status:string)=>void\r\n}\r\n\r\nexport const Profile = (props:ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status}  updateStatus={props. updateStatus}/>\r\n            < MyPostsContainer/>\r\n\r\n        </div>\r\n    );\r\n};\r\n","import React, {ComponentType} from 'react';\r\nimport {StateType} from '../../redux/redux-store';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\ntype PathParamsType = {\r\n    userId: any\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerType\r\n//type PropsType = <PathParamsType> & ProfileContainerType\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType,\r\n    status: string\r\n    authorizedUserId:number\r\n    isAuth:boolean\r\n\r\n}\r\ntype MapDispatchToPropsType = {\r\n    //setUserProfile: (profile: ProfileType) => void\r\n    getUserProfile: (userId: number) => void,\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype ProfileContainerType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType, StateType> {\r\n\r\n    componentDidMount() {\r\n\r\n        let userId = this.props.match.params.userId\r\n\r\n        console.log(this.props.authorizedUserId)\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n           /* if (!userId){\r\n                this.props.history.push('/login')\r\n            }*/\r\n        }\r\n\r\n        /*axios.get(`https://social-network.samuraijs.com/api/1.0/profile/ ${userId}` )*/\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n        /*  usersAPI.getProfile(userId)\r\n              .then((response) => {\r\n                  this.props.setUserProfile(response.data)\r\n                  console.log(response.data)\r\n              })*/\r\n\r\n    }\r\n\r\n    render() {\r\n        /*  if (!this.props.isAuth) return < Redirect to={'/login'}/>*/\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}/>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/*let AuthRedirectComponent=(props:PropsType)=>{\r\n    if (!props.isAuth) return < Redirect to={'/login'}/>\r\n    return <ProfileContainer {...props} />\r\n}*/\r\nlet AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n\r\nlet mapStateToProps = (state: StateType): MapStateToPropsType => {\r\n    console.log(state)\r\n    return {\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        //isAuth:state.auth.isAuth\r\n\r\n    } as MapStateToPropsType\r\n}\r\n\r\n\r\nexport default compose<ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {\r\n        getUserProfile,\r\n        getStatus,\r\n        updateStatus\r\n    }),\r\n    withRouter,\r\n)(ProfileContainer)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {StateType} from '../redux/redux-store';\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\nlet mapStateToPropsForRedirect = (state: StateType): MapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsForRedirectType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\n\r\n\r\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","src","className","s","photos","large","Preloader","Post","message","likesCount","MyPosts","memo","console","log","postsElements","posts","map","p","id","React","AddNewPostReduxForm","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","validate","required","placeholder","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","getUserProfile","getStatus","withAuthRedirect","compose","auth","isAuth","withRouter","mapStateToPropsForRedirect","Component","restProps","to"],"sourceRoot":""}